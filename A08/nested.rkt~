;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname nested) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor mixed-fraction #f #t none #f () #t)))
;;
;; ***************************************************
;; Yasmeen Elkheir (21071183)
;; CS 135 Fall 2023
;; Assignment 08, question 4
;; ***************************************************
;;

;; ~~~~~ 4a

;; A (nested-listof X) is one of:
;; * empty
;; * (cons (nested-listof X) (nested-listof X))
;; * (cons X (nested-listof X))
;; Requires: X itself is not a list type

;; nested-listof-X-template: (nested-list-of X) -> Any

(define (nested-listof-X-template nlox)
  (cond
    [(empty? nlox) ...]
    [(cons? (first nlox)) ...]
    [else (... (first nlox)
               (nested-listof-X-template (rest nlox)))]))

;; ~~~~~ 4b

;; (nested-filter pred nl) consumes a predicate function and a nested list and removes
;; every element that appears anywhere in the nested list where the predicate function is
;; false for that element

;; Example:

(check-expect (nested-filter positive? (cons 1 (cons
                                                (cons 2 (cons 3 empty))
                                                (cons -1 (cons -5 (cons 6 (cons (cons 5
                                                                                      (cons 8 empty)
                                                                                      ) empty)))))))
              (cons 1 (cons (cons 2 (cons 3 empty)) (cons 6 (cons (cons 5 (cons 8 empty)) empty)))))

;; nested-filter: (Any -> Bool) (nested-listof X) -> (nested-listof X)

(define (nested-filter pred nl)
  (cond
    [(empty? nl) empty]
    [(cons? (first nl)) (nested-filter pred (first nl))]
    [(pred (first nl)) (list (first nl) (nested-filter pred (rest nl)))]
    [else (nested-filter pred (rest nl))]))
    
