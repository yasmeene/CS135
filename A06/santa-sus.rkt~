;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname santa-sus) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor mixed-fraction #f #t none #f () #t)))
;;
;; ***************************************************
;; Yasmeen Elkheir (21071183)
;; CS 135 Fall 2023
;; Assignment 06, question 4
;; ***************************************************
;;

(define-struct action (name niceness desc))
;; An Action is a (make-action Str Int Str)
;; requires: -100 <= niceness <= 100
;;           niceness cannot be zero

(define instr-actlst  
  (list (make-action "Zahra" -4 "Procrastinated on CS 135 assignment")
        (make-action "Armin" 10 "Helped Zahra proofread the assignment")
        (make-action "Mark" 3 "Shared his lego with Byron during playtime")
        (make-action "Patrick" -10 "Joined a bicycle gang")
        (make-action "Armin" -1 "Stayed up too late on a schoolnight")
        (make-action "Charlie" -5 "Scribbled on the walls")
        (make-action "Byron" -4 "Harassed a goose in the park")
        (make-action "Zahra" -5 "Ate the ISAs' Cheetos")
        (make-action "Armin" 6 "Did his homework before going out to play")
        (make-action "Zahra" 3 "Cleaned her room without being nagged")
        (make-action "Zahra" -7 "Was disobedient at the grocery store")
        (make-action "Charlie" 5 "Saved Patrick from a rival bicycle gang")))


;; (extreme-actions name loa) consumes a child's name and a list of Actions and produces a list
;; of strings where the first element is the description of the action the child performed
;; with the smallest niceness score, and the seccond element is the description of the action the
;; child performed with the larges niceness score

;; Examples:

(check-expect
 (extreme-actions "Zahra" instr-actlst)
 (list "Was disobedient at the grocery store" "Cleaned her room without being nagged"))

(check-expect
 (extreme-actions "Patrick" instr-actlst)
 (list "Joined a bicycle gang" "Joined a bicycle gang"))

;; extreme-actions: Str (listof Actions) -> (listof Str)

(define (extreme-actions name loa)
  (cond
    [(empty? loa)]))


(define (max-list/acc loa max-so-far
     