;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname edges) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor mixed-fraction #f #t none #f () #t)))
;;
;; ***************************************************
;; Yasmeen Elkheir (21071183)
;; CS 135 Fall 2023
;; Assignment 10, question 1
;; ***************************************************
;;


;; A Node is a Sym
;; A Graph is a (listof (list Node (listof Node)))

;; An EdgeList is a (listof (list Node Node))

;; ~~~~~ 1a

;; (adj->edge adj-g) consumes a graph in  adjacency-list representation and converts it into
;; edge-list representation.

;; Example:

(check-expect (adj->edge '((A (C D E)) (B (E J)) (C ()) (D (F J))
                                       (E (K)) (F (K H)) (H ()) (J (H)) (K ())))
              '((A C) (A D) (A E) (B E) (B J) (D F) (D J)
                      (E K) (F K) (F H) (J H)))

;; adj->edge: Graph -> EdgeList

(define (adj->edge adj-g)
  (cond
    [(empty? adj-g) empty]
    [(cons? adj-g) (map ((lambda (node neigh-lst)
                          (cond
                            [(empty? neigh-lst) empty]
                            [else (list node (first neigh-lst))])) (first (first adj-g))
                                                                    (second (first adj-g))) adj-g)]))